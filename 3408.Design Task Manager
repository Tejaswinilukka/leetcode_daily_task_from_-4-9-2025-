import java.util.*;

class TaskManager {
    
    private static class Task {
        int userId;
        int taskId;
        int priority;
        public Task(int u, int t, int p) {
            userId = u;
            taskId = t;
            priority = p;
        }
    }
    
    // Map from taskId â†’ (userId, priority)
    private Map<Integer, Task> taskMap;
    // Sorted set of tasks, sorted by priority desc, then taskId desc
    private TreeSet<Task> sortedTasks;
    
    public TaskManager(List<List<Integer>> tasks) {
        taskMap = new HashMap<>();
        sortedTasks = new TreeSet<>((a, b) -> {
            if (a.priority != b.priority) return Integer.compare(b.priority, a.priority);
            return Integer.compare(b.taskId, a.taskId);
        });
        for (List<Integer> t : tasks) {
            int u = t.get(0), tid = t.get(1), pri = t.get(2);
            Task newTask = new Task(u, tid, pri);
            taskMap.put(tid, newTask);
            sortedTasks.add(newTask);
        }
    }
    
    public void add(int userId, int taskId, int priority) {
        Task newTask = new Task(userId, taskId, priority);
        taskMap.put(taskId, newTask);
        sortedTasks.add(newTask);
    }
    
    public void edit(int taskId, int newPriority) {
        Task old = taskMap.get(taskId);
        if (old == null) return;
        sortedTasks.remove(old);
        Task updated = new Task(old.userId, taskId, newPriority);
        taskMap.put(taskId, updated);
        sortedTasks.add(updated);
    }
    
    public void rmv(int taskId) {
        Task old = taskMap.remove(taskId);

        if (old == null) return;
        sortedTasks.remove(old);
    }
    
    public int execTop() {
        if (sortedTasks.isEmpty()) return -1;
        Task top = sortedTasks.first();
        sortedTasks.remove(top);
        taskMap.remove(top.taskId);
        return top.userId;
    }
}
